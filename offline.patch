diff --git a/cmake/qeHelpers.cmake b/cmake/qeHelpers.cmake
index e3b1b355c..522ce1165 100644
--- a/cmake/qeHelpers.cmake
+++ b/cmake/qeHelpers.cmake
@@ -96,84 +96,6 @@ function(_qe_add_cuda_link_flags TGT)
 endfunction(_qe_add_cuda_link_flags)
 
 function(qe_git_submodule_update PATH)
-    # validate submodule_commit_hash_records against git database
-    get_filename_component(SUBMODULE_NAME ${PATH} NAME)
-    get_filename_component(SUBMODULE_UPPER_DIR ${PATH} DIRECTORY)
-    set(commit_hash_file ${qe_SOURCE_DIR}/${SUBMODULE_UPPER_DIR}/submodule_commit_hash_records)
-    # a submodule hash consistency check
-    if(IS_GIT_PROJECT AND EXISTS ${commit_hash_file})
-        # Extract submodule commit hash from git repo database
-        execute_process(COMMAND ${GIT_EXECUTABLE} ls-tree HEAD ${PATH}
-                        OUTPUT_VARIABLE DATABASE_STRING
-                        WORKING_DIRECTORY ${qe_SOURCE_DIR})
-        string(REGEX REPLACE " |\t" ";" DATABASE_OUTPUT ${DATABASE_STRING})
-        list(GET DATABASE_OUTPUT 2 DATABASE_HASH)
-
-        # Extract submodule commit hash from saved records
-        execute_process(COMMAND grep ${SUBMODULE_NAME} ${commit_hash_file}
-                        OUTPUT_VARIABLE RECORD_STRING)
-        string(REPLACE " " ";" RECORD_OUTPUT ${RECORD_STRING})
-        list(GET RECORD_OUTPUT 0 RECORD_HASH)
-
-        if(NOT DATABASE_HASH STREQUAL RECORD_HASH)
-          message(FATAL_ERROR "If you are a user, please file a bug report! "
-                              "If you are a developer, probably submodule '${SUBMODULE_NAME}' is being touched. "
-                              "Inconsistent submodule commit hashes have been detected.\n"
-                              "  ${DATABASE_HASH} from repo data base.\n"
-                              "  ${RECORD_HASH} from 'submodule_commit_hash_records' file.\n")
-        endif()
-    endif()
-
-    if(IS_GIT_PROJECT)
-        # Old versions of git aren't able to run init+update
-        # in one go (via 'git submodule update --init'), we need
-        # to call one command for each operation:
-        execute_process(COMMAND ${GIT_EXECUTABLE} submodule init -- ${PATH}
-                        WORKING_DIRECTORY ${qe_SOURCE_DIR})
-        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --depth 1 -- ${PATH}
-                        WORKING_DIRECTORY ${qe_SOURCE_DIR})
-    else()
-        if(EXISTS ${commit_hash_file})
-            if(EXISTS ${qe_SOURCE_DIR}/${PATH}/.git)
-                message(STATUS "Previous clone found at ${qe_SOURCE_DIR}/${PATH}.")
-            else()
-                # get repo URL
-                execute_process(COMMAND ${GIT_EXECUTABLE} config --file .gitmodules --get submodule.${PATH}.URL
-                                OUTPUT_VARIABLE SUBMODULE_URL
-                                WORKING_DIRECTORY ${qe_SOURCE_DIR}
-                                OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-                # Extract submodule commit hash from saved records
-                execute_process(COMMAND grep ${SUBMODULE_NAME} ${commit_hash_file}
-                                OUTPUT_VARIABLE RECORD_STRING)
-                string(REPLACE " " ";" RECORD_OUTPUT ${RECORD_STRING})
-                list(GET RECORD_OUTPUT 0 RECORD_HASH)
-
-                message(STATUS "Cloning ${SUBMODULE_URL} into ${qe_SOURCE_DIR}/${PATH}.")
-
-                execute_process(COMMAND ${GIT_EXECUTABLE} init ${PATH}
-                                WORKING_DIRECTORY ${qe_SOURCE_DIR})
-                execute_process(COMMAND ${GIT_EXECUTABLE} remote add origin ${SUBMODULE_URL}
-                                WORKING_DIRECTORY ${qe_SOURCE_DIR}/${PATH})
-                execute_process(COMMAND ${GIT_EXECUTABLE} fetch --depth 1 origin ${RECORD_HASH}
-                                WORKING_DIRECTORY ${qe_SOURCE_DIR}/${PATH}
-                                RESULT_VARIABLE GIT_FETCH_FAILED)
-                if(GIT_FETCH_FAILED)
-                    file(REMOVE_RECURSE ${qe_SOURCE_DIR}/${PATH}/.git)
-                    message(FATAL_ERROR "git fetch failed! Be sure to make ${qe_SOURCE_DIR}/${PATH} completely empty "
-                                        "(no hidden files) or removed before a re-try. "
-                                        "If this was caused by the lack of Internet access, "
-                                        "you can execute 'initialize_external_repos.sh' under QE 'TOPDIR/external' subdirectory "
-                                        "on a laptop and transfer the whole 'external' subdirectory.")
-                endif()
-
-                execute_process(COMMAND ${GIT_EXECUTABLE} checkout -b recorded_HEAD FETCH_HEAD
-                                WORKING_DIRECTORY ${qe_SOURCE_DIR}/${PATH})
-            endif()
-        else()
-          message(FATAL_ERROR "Failed to handle submodule '${SUBMODULE_NAME}'!")
-        endif()
-    endif()
 endfunction(qe_git_submodule_update)
 
 function(qe_add_executable EXE)
